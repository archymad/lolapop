/**
 * Point d'entr√©e principal du bot WhatsApp
 * Ce script initialise le client WhatsApp et g√®re les interactions
 */

const { Client, LocalAuth, MessageMedia } = require('whatsapp-web.js');
const qrcode = require('qrcode-terminal');
const path = require('path');
const fs = require('fs');
const configurator = require('../configurator');
const { loadStepProcessor } = require('./stepProcessor');
const { getLogger } = require('../utils/logger');
const MediaManager = require('./MediaManager');

// Variable globale pour stocker l'instance du client
let client = null;
let sessions = new Map();
let isRunning = false;
let logger = null;

// Fonction pour d√©finir le logger
function setLogger(customLogger) {
  logger = customLogger;
}

// Fonction pour obtenir le logger
function getLoggerInstance() {
  if (!logger) {
    logger = getLogger({
      logToFile: true,
      logDir: './logs'
    });
  }
  return logger;
}

// Fonction d'initialisation asynchrone
async function initializeBot() {
  const log = getLoggerInstance();
  
  if (isRunning) {
    log.warn('Le bot est d√©j√† en cours d\'ex√©cution');
    return { client, sessions };
  }

  log.info('Initialisation du bot conversationnel...');
  
  try {
    // Initialiser le configurateur
    await configurator.initialize();
    log.info('Configurateur initialis√©');
    
    // R√©cup√©rer les configurations
    const botConfig = configurator.getConfig('bot');
    log.info('Configuration du bot charg√©e', {
      profile: botConfig.behavior?.activeProfile,
      scenario: botConfig.scenario?.active
    });
    
    // Initialiser le processeur d'√©tapes avec le configurateur
    const stepProcessor = loadStepProcessor(configurator);
    log.info('Processeur d\'√©tapes initialis√©');
    
    // Initialiser le gestionnaire de m√©dias
    const mediaConfig = configurator.getConfig('media');
    const mediaManager = new MediaManager(mediaConfig);
    log.info('Gestionnaire de m√©dias initialis√©');
    
    // Configuration du client WhatsApp
    client = new Client({
      authStrategy: new LocalAuth({
        dataPath: './.wwebjs_auth'
      }),
      puppeteer: {
        headless: botConfig.messaging?.platforms?.whatsapp?.headless !== false,
        args: ['--no-sandbox', '--disable-setuid-sandbox']
      }
    });
    
    // Cr√©er une classe Session pour g√©rer les conversations
    class Session {
      constructor(chatId) {
        this.chatId = chatId;
        // Utiliser l'√©tape initiale du sc√©nario actif
        this.currentStep = botConfig.scenario?.startStep || 'step_1_source';
        this.previousStep = null;
        this.userData = {};
        this.lastActivity = Date.now();
      }
    }
    
    // √âv√©nements WhatsApp
    client.on('qr', (qr) => {
      log.info('QR Code g√©n√©r√© - En attente de scan');
      qrcode.generate(qr, { small: true });
      console.log('Scannez ce QR Code avec WhatsApp pour vous connecter');
    });
    
    client.on('ready', () => {
      log.info('Client WhatsApp pr√™t et connect√©', {
        profile: botConfig.behavior?.activeProfile || 'default',
        scenario: botConfig.scenario?.active || 'lola_scenario'
      });
      isRunning = true;
    });
    
    client.on('authenticated', () => {
      log.info('Authentification WhatsApp r√©ussie');
    });
    
    client.on('auth_failure', (message) => {
      log.error('√âchec de l\'authentification WhatsApp', { message });
    });
    
    client.on('disconnected', (reason) => {
      log.warn('D√©connexion de WhatsApp', { reason });
      isRunning = false;
    });
    
    client.on('message', async (message) => {
      try {
        // Ignorer les messages de statut et les broadcasts
        if (message.isStatus || message.from === 'status@broadcast') return;
        
        const chatId = message.from;
        const messageContent = message.body.trim();
        
        log.info('Message re√ßu', {
          chatId: chatId.split('@')[0], // Masquer le domaine pour la confidentialit√©
          messageLength: messageContent.length,
          hasMedia: message.hasMedia
        });
        
        // Obtenir ou cr√©er une session pour ce chat
        if (!sessions.has(chatId)) {
          sessions.set(chatId, new Session(chatId));
          log.info('Nouvelle session cr√©√©e', { chatId: chatId.split('@')[0] });
        }
        const session = sessions.get(chatId);
        session.lastActivity = Date.now();
        
        // Initialiser le compteur de photos si n√©cessaire
        if (!session.photoRequestCount) {
          session.photoRequestCount = 0;
        }
        
        // V√©rifier si l'utilisateur demande une photo
        const askingForPhoto = messageContent.toLowerCase().includes('photo') || 
                              messageContent.toLowerCase().includes('pic') || 
                              messageContent.toLowerCase().includes('image') || 
                              messageContent.toLowerCase().includes('selfie') ||
                              messageContent.toLowerCase().includes('montre toi');
        
        // Traiter la demande de photo si d√©tect√©e
        if (askingForPhoto) {
          // V√©rifier si c'est la premi√®re demande
          if (session.photoRequestCount === 0) {
            session.photoRequestCount++;
            log.info('Premi√®re demande de photo d√©tect√©e', { chatId: chatId.split('@')[0] });
            
            try {
              // Chemin vers l'image
              const photoPath = path.join(__dirname, '..', 'assets', 'photo_ask.jpg');
              
              // V√©rifier si le fichier existe
              if (fs.existsSync(photoPath)) {
                // Charger l'image
                const media = MessageMedia.fromFilePath(photoPath);
                
              // Forcer l'envoi en mode vue unique en utilisant une m√©thode interne de la biblioth√®que
              try {
                // On doit envoyer le message √† WhatsApp d'une mani√®re sp√©cifique pour forcer le mode vue unique
                const chat = await client.getChatById(chatId);
                
                // Cette m√©thode est un peu plus complexe mais garantit le mode vue unique
                await chat.sendMessage(media, {
                  caption: "Rien que pour toi... üíã",
                  isViewOnce: true, // Assurons-nous d'activer cette option √©galement
                  sendMediaAsViewOnce: true, // Option alternative qui peut √™tre n√©cessaire
                  viewOnce: true // Conserver l'option originale aussi
                });
                
                log.info('Photo envoy√©e en mode vue unique forc√©');
              } catch (sendError) {
                log.error('Erreur avec la m√©thode forc√©e, tentative alternative', { error: sendError.message });
                
                // M√©thode alternative - dernier recours
                const viewOnceOptions = {
                  caption: "Rien que pour toi... üíã", 
                  sendMediaAsSticker: false,
                  viewOnce: true,
                  isViewOnce: true
                };
                
                await client.sendMessage(chatId, media, viewOnceOptions);
              }
                
                log.info('Photo sur demande envoy√©e', { chatId: chatId.split('@')[0] });
                return; // Ne pas traiter davantage ce message
              } else {
                log.error('Photo sur demande non trouv√©e', { path: photoPath });
              }
            } catch (photoError) {
              log.error('Erreur lors de l\'envoi de la photo sur demande', { 
                error: photoError.message,
                chatId: chatId.split('@')[0]
              });
            }
          } else {
            // C'est au moins la deuxi√®me demande, envoyer un message de refus
            setTimeout(() => {
              client.sendMessage(chatId, "C'est pas gratuit haha üòè").then(() => {
                log.info('Message de refus pour photo suppl√©mentaire envoy√©', {
                  chatId: chatId.split('@')[0]
                });
              });
            }, 1000);
            return; // Ne pas traiter davantage ce message
          }
        }
        
        // Analyser le message avec NLP
        try {
          log.debug('Envoi du message au serveur NLP pour analyse');
          
          const response = await fetch(`${process.env.NLP_SERVER_URL || 'http://localhost:5000'}/api/analyze`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ message: messageContent })
          });
          
          if (!response.ok) {
            throw new Error(`Request failed with status code ${response.status}`);
          }
          
          const analysisResult = await response.json();
          log.debug('R√©sultat de l\'analyse NLP', { analysisResult });
          
          // Mettre √† jour les donn√©es utilisateur
          if (analysisResult.contains_location && analysisResult.location_name) {
            session.userData.location = analysisResult.location_name;
            log.info('Localisation d√©tect√©e', { location: analysisResult.location_name });
          }
          if (analysisResult.contains_age && analysisResult.age_value) {
            session.userData.age = analysisResult.age_value;
            log.info('√Çge d√©tect√©', { age: analysisResult.age_value });
          }
          
          // Obtenir l'√©tape actuelle
          const currentStep = stepProcessor.getStepById(session.currentStep);
          
          // D√©finir le sc√©nario actif une fois pour toutes
          const activeScenario = botConfig.scenario.active;
          log.info('Sc√©nario actif:', { activeScenario });
          
          // V√©rifier si c'est le premier message de l'utilisateur (d√©but de conversation)
          const isNewConversation = session.currentStep === botConfig.scenario.startStep;
          
          // D√©tecter une large gamme de salutations possibles
          const salutationPatterns = [
            /^hey$/i, /^yo$/i, /^salut$/i, /^bonjour$/i, /^hello$/i, /^hi$/i, /^coucou$/i,
            /^hola$/i, /^holla$/i, /^holla holla$/i, /^bonsoir$/i, /^slt$/i, /^bjr$/i,
            /^bonjour mademoiselle$/i, /^bonjour madame$/i, /^salut belle$/i,
            /^cc$/i, /^coucou toi$/i, /^comment va$/i, /^√ßa va$/i
          ];
          
          // V√©rifier si le message est une salutation
          const isSalutation = salutationPatterns.some(pattern => pattern.test(messageContent));
          
          // Si c'est une salutation ou le premier message, envoyer le message de bienvenue
          if (isSalutation || (!analysisResult.intent && isNewConversation)) {
            // Pour les messages de type salutation, on r√©initialise la session et on envoie le premier message
            session.currentStep = botConfig.scenario.startStep || 'step_1_source';
            
            // Envoyer directement le premier message du sc√©nario
            const welcomeStep = stepProcessor.getStepById(session.currentStep);
            if (welcomeStep && welcomeStep.messages && welcomeStep.messages.length > 0) {
              setTimeout(async () => {
                const content = welcomeStep.messages[0].content;
                await simulateTypingAndSend(chatId, content, {
                  typingSpeed: 50, // L√©g√®rement plus rapide pour le premier message
                  minTypingTime: 1500
                }).then(() => {
                  log.info('Message de bienvenue envoy√© avec simulation de frappe', {
                    chatId: chatId.split('@')[0]
                  });
                });
              }, 1000);
              return; // Ne pas traiter davantage ce message
            }
          }
          
          // Passer √† l'√©tape suivante (avec gestion des transitions complexes)
          let nextStep;
          let directResponse = null;
          
          // D√©tection de l'√©tape actuelle
          log.info('Session actuelle:', { 
            currentStep: session.currentStep,
            sc√©nario: activeScenario,
            userData: JSON.stringify(session.userData)
          });
          
          // V√©rifier si c'est l'√©tape de demande de plateforme
          if (session.currentStep === 'step_1_source') {
            if (messageContent.toLowerCase().includes('nous') && 
                messageContent.toLowerCase().includes('libertins')) {
              // Si l'utilisateur mentionne la plateforme attendue, passer √† l'√©tape de localisation
              nextStep = 'step_2_location';
            } else {
              // Sinon, envoyer le message de fallback et rester √† cette √©tape
              directResponse = "Alors... quelle plateforme exactement ? üòò";
              nextStep = session.currentStep;
            }
          }
          // V√©rifier si c'est l'√©tape de localisation
          else if (session.currentStep === 'step_2_location') {
            // Liste des r√©gions de France
            const regions = [
              'alsace', 'aquitaine', 'auvergne', 'bourgogne', 'bretagne', 'centre', 
              'champagne', 'corse', 'franche-comt√©', '√Æle-de-france', 'ile-de-france', 
              'languedoc', 'limousin', 'lorraine', 'midi-pyr√©n√©es', 'nord-pas-de-calais', 
              'normandie', 'pays de la loire', 'picardie', 'poitou-charentes', 
              'provence', 'rh√¥ne-alpes', 'rhone-alpes', 'grand est', 'hauts-de-france',
              'nouvelle-aquitaine', 'occitanie', 'auvergne-rh√¥ne-alpes', 'paca'
            ];
            
            const normalizedLocation = messageContent.toLowerCase().trim();
            
            // V√©rifier si l'utilisateur a entr√© une r√©gion
            const isRegion = regions.some(region => 
              normalizedLocation === region || 
              normalizedLocation.includes(region)
            );
            
            if (isRegion) {
              // Si c'est une r√©gion, demander une ville pr√©cise
              directResponse = "Non je te demande ta ville mdrrr üòÖ pas ta r√©gion";
              nextStep = session.currentStep; // Rester sur cette √©tape
            } else {
              // V√©rifier si la ville est connue ou non
              const geoConfig = configurator.getConfig('geo');
              const locations = geoConfig.locations || {};
              
              // V√©rifier si la ville est connue
              let cityIsKnown = false;
              for (const city in locations) {
                if (city.toLowerCase() === normalizedLocation) {
                  cityIsKnown = true;
                  break;
                }
                
                // V√©rifier aussi parmi les villages
                for (const village of (locations[city].villages || [])) {
                  if (village.toLowerCase() === normalizedLocation) {
                    cityIsKnown = true;
                    break;
                  }
                }
                
                if (cityIsKnown) break;
              }
              
              if (cityIsKnown) {
                // Si l'utilisateur a donn√© une ville connue, passer √† l'√©tape suivante
                nextStep = 'step_2_response';
                
                // Sauvegarder la localisation
                session.userData.location = messageContent;
                
                // Si c'est une ville connue (pas un village), l'enregistrer comme derni√®re ville connue dans stepProcessor
                for (const city in locations) {
                  if (city.toLowerCase() === normalizedLocation) {
                    stepProcessor.lastKnownCity = city;
                    break;
                  }
                }
              } else {
                // Si la ville n'est pas connue, demander une grande ville proche
                directResponse = "Je connais pas... c'est proche de quelle grande ville ? üòò";
                nextStep = session.currentStep; // Rester sur cette √©tape
              }
            }
          }
          // V√©rifier si c'est l'√©tape apr√®s avoir donn√© la localisation
          else if (session.currentStep === 'step_2_response') {
            // Passer √† l'√©tape de l'√¢ge
            nextStep = 'step_3_age';
            
            // Si la localisation n'a pas √©t√© enregistr√©e, utiliser une valeur par d√©faut
            if (!session.userData.location) {
              session.userData.location = "dans le coin";
            }
          }
          // V√©rifier si c'est l'√©tape de demande d'√¢ge
          else if (session.currentStep === 'step_3_age') {
            // V√©rifier si l'√¢ge est un nombre
            const ageMatch = messageContent.match(/\d+/);
            if (ageMatch) {
              const age = parseInt(ageMatch[0]);
              session.userData.age = age;
              
              // Choisir l'√©tape suivante selon l'√¢ge
              if (age < 19) {
                nextStep = 'step_3_young';
              } else if (age <= 30) {
                nextStep = 'step_3_normal';
              } else {
                nextStep = 'step_3_older';
              }
            } else {
              // Si pas d'√¢ge d√©tect√©, rester √† cette √©tape et demander √† nouveau
              directResponse = "Quel √¢ge as-tu ? J'ai besoin de savoir üòâ";
              nextStep = session.currentStep;
            }
          }
          // √âtape de transition vers l'offre
          else if (session.currentStep === 'step_3_young' || 
                  session.currentStep === 'step_3_normal' || 
                  session.currentStep === 'step_3_older') {
            
            // V√©rifier si le message est la deuxi√®me r√©ponse apr√®s l'√©tape 3 (c'est-√†-dire apr√®s "Tu as envie de quoi?")
            if (session.waitingForOfferResponse) {
              // L'utilisateur a r√©pondu √† la question, donc on peut passer √† l'√©tape 4
              session.waitingForOfferResponse = false;
              nextStep = 'step_4_offer';
            } else {
              // C'est la premi√®re r√©ponse, donc on reste √† cette √©tape mais on marque qu'on attend la r√©ponse
              session.waitingForOfferResponse = true;
              nextStep = session.currentStep;
              // On a d√©j√† envoy√© le message principal de cette √©tape, donc on envoie juste le message "Tu as envie de quoi?"
              directResponse = "Tu as envie de quoi ? üòà";
            }
          }
          // V√©rifier si c'est l'√©tape de choix du service
          else if (session.currentStep === 'step_4_offer') {
            // V√©rifier si l'utilisateur a mentionn√© un prix ou un service
            const priceKeywords = ['30', '40', '50', '70', '150', '300', 'euros', '‚Ç¨'];
            const serviceKeywords = ['pipe', 'sucer', 'suce', 'baise', 'baiser', 'gicler', 'min', 'heure', 'caisse', 'voiture'];
            
            const hasPriceKeyword = priceKeywords.some(keyword => 
              messageContent.toLowerCase().includes(keyword)
            );
            
            const hasServiceKeyword = serviceKeywords.some(keyword => 
              messageContent.toLowerCase().includes(keyword)
            );
            
            if (hasPriceKeyword || hasServiceKeyword) {
              // L'utilisateur a fait un choix, passer √† l'√©tape suivante
              nextStep = 'step_5_rdv';
            } else {
              // L'utilisateur n'a pas indiqu√© clairement son choix, demander une clarification
              directResponse = "Ouais mais t'veux quoi bb ? 30min ? 1h ? Ou juste une pipe dans ta caisse ? üòè";
              nextStep = session.currentStep; // Rester √† cette √©tape
            }
          }
          // Pour toutes les autres √©tapes, utiliser la logique standard
          else if (currentStep?.transitions?.onSuccess) {
            if (typeof currentStep.transitions.onSuccess === 'object') {
              if (currentStep.transitions.onSuccess.type === 'intent_platform') {
                // V√©rifier si le message contient une plateforme attendue
                const expectedPlatforms = currentStep.transitions.onSuccess.expectedPlatforms || [];
                const messageMatches = expectedPlatforms.some(platform => 
                  messageContent.toLowerCase().includes(platform.toLowerCase())
                );
                
                if (messageMatches) {
                  nextStep = currentStep.transitions.onSuccess.nextStep;
                } else {
                  directResponse = currentStep.transitions.onSuccess.fallback;
                  nextStep = session.currentStep;
                }
              } else if (currentStep.transitions.onSuccess.type === 'intent_detection') {
                // V√©rifier si le message contient des mots-cl√©s
                const keywords = currentStep.transitions.onSuccess.keywords || [];
                const messageMatches = keywords.some(keyword => 
                  messageContent.toLowerCase().includes(keyword.toLowerCase())
                );
                
                if (messageMatches) {
                  nextStep = currentStep.transitions.onSuccess.nextStep;
                } else {
                  // Utiliser l'√©tape de clarification si disponible
                  nextStep = currentStep.transitions.onSuccess.fallback || session.currentStep;
                }
              } else if (currentStep.transitions.onSuccess.type === 'conditional') {
                // Pour les transitions conditionnelles
                nextStep = currentStep.transitions.onSuccess.default || 'step_2_location';
              } else {
                // Pour les autres types
                nextStep = currentStep.transitions.onSuccess.nextStep || 'step_2_location';
              }
            } else {
              // Transitions simples (cha√Æne de caract√®res)
              nextStep = currentStep.transitions.onSuccess;
            }
          } else {
            // Fallback si pas de transition d√©finie
            nextStep = 'step_3_normal';
          }
          log.info('Transition d\'√©tape', {
            from: session.currentStep,
            to: nextStep
          });
          
          session.previousStep = session.currentStep;
          session.currentStep = nextStep;
          
          // Si nous avons une r√©ponse directe, l'envoyer imm√©diatement
          if (directResponse) {
            log.info('Envoi de r√©ponse directe', { response: directResponse });
            
            // Ajouter des typos pour un effet naturel
            const content = addRandomTypos(directResponse);
            
            // Envoyer avec un l√©ger d√©lai
            setTimeout(async () => {
              try {
                await simulateTypingAndSend(chatId, content, {
                  typingSpeed: 70, // L√©g√®rement plus rapide pour les r√©ponses directes
                  minTypingTime: 1800
                });
                log.info('Message direct envoy√© avec simulation de frappe', {
                  chatId: chatId.split('@')[0],
                  messageLength: content.length
                });
              } catch (error) {
                log.error('Erreur lors de l\'envoi du message direct', {
                  error: error.message,
                  chatId: chatId.split('@')[0]
                });
              }
            }, 1000);
          } 
          // Sinon, envoyer le message correspondant √† la nouvelle √©tape
          else {
            const newStep = stepProcessor.getStepById(session.currentStep);
            if (newStep && newStep.messages && newStep.messages.length > 0) {
              // Cas sp√©cial pour step_4_offer et step_6_acompte : envoyer chaque message s√©quentiellement
              if (session.currentStep === 'step_4_offer' || session.currentStep === 'step_6_acompte') {
                // Envoyer chaque message s√©par√©ment avec un d√©lai entre eux
                for (let i = 0; i < newStep.messages.length; i++) {
                  const messageObj = newStep.messages[i];
                  
                  // Personnaliser et formater le message
                  let content = messageObj.content;
                  content = stepProcessor.personalizeMessage(content, session.userData);
                  content = addRandomTypos(content);
                  
                  // Calculer un d√©lai progressif
                  const baseDelay = messageObj.delayMs || 3000;
                  const delay = baseDelay + (i * 2000); // Ajouter 2 secondes par message suppl√©mentaire
                  
                  // Cr√©er une fermeture (closure) pour capturer i
                  ((index, messageContent, messageDelay) => {
                    setTimeout(async () => {
                      // V√©rifier s'il s'agit du message indiquant l'envoi d'une photo
                      if (messageContent.includes("photo vue unique envoy√©e")) {
                        // Envoyer la photo du profil en mode "vue unique"
                        try {
                          // Charger l'image du profil
                          const media = MessageMedia.fromFilePath(mediaConfig.images.categories.profile.path);
                          
                          // On tente d'utiliser l'approche du chat pour forcer le mode vue unique
                          try {
                            const chat = await client.getChatById(chatId);
                            
                            // Cette m√©thode est plus fiable pour le mode vue unique
                            await chat.sendMessage(media, {
                              caption: "üíã", // √âmotic√¥ne comme l√©gende
                              isViewOnce: true,
                              sendMediaAsViewOnce: true,
                              viewOnce: true
                            });
                            
                            log.info(`Photo vue unique envoy√©e avec succ√®s via chat √† ${chatId.split('@')[0]}`);
                          } catch (chatError) {
                            log.error('Erreur avec la m√©thode chat, tentative alternative', { error: chatError.message });
                            
                            // M√©thode alternative si la premi√®re √©choue
                            const viewOnceOptions = {
                              caption: "üíã", // √âmotic√¥ne comme l√©gende
                              sendMediaAsSticker: false,
                              viewOnce: true,
                              isViewOnce: true
                            };
                            
                            await client.sendMessage(chatId, media, viewOnceOptions);
                            log.info('Envoi de photo via m√©thode alternative');
                          }
                          
                          log.info(`Photo vue unique envoy√©e avec succ√®s √† ${chatId.split('@')[0]}`);
                        } catch (mediaError) {
                          log.error(`Erreur lors de l'envoi de la photo en mode vue unique`, {
                            error: mediaError.message,
                            chatId: chatId.split('@')[0]
                          });
                          // En cas d'erreur, envoyer quand m√™me le message texte original
                          client.sendMessage(chatId, messageContent);
                        }
                      } else {
                        // Envoyer un message texte normal
                        client.sendMessage(chatId, messageContent).then(() => {
                          log.info(`Message d'offre ${index+1}/${newStep.messages.length} envoy√©`, {
                            chatId: chatId.split('@')[0],
                            messageLength: messageContent.length
                          });
                        }).catch(error => {
                          log.error(`Erreur lors de l'envoi du message d'offre ${index+1}`, {
                            error: error.message,
                            chatId: chatId.split('@')[0]
                          });
                        });
                      }
                    }, messageDelay);
                  })(i, content, delay);
                }
              } 
              // Pour toutes les autres √©tapes, comportement normal
              else {
                // S√©lectionner un message (ou une variation)
                const messageObj = newStep.messages[0];
                let content = messageObj.content;
                
                // Utiliser une variation si disponible
                if (messageObj.variations && messageObj.variations.length > 0 && Math.random() > 0.5) {
                  const randomIndex = Math.floor(Math.random() * messageObj.variations.length);
                  content = messageObj.variations[randomIndex];
                  log.debug('Variation de message s√©lectionn√©e', { index: randomIndex });
                }
                
                // Personnaliser le message avec les donn√©es utilisateur
                content = stepProcessor.personalizeMessage(content, session.userData);
                
                // Ajouter des typos al√©atoires pour un effet plus naturel
                content = addRandomTypos(content);
                
                // D√©lai avant d'envoyer
                const delay = messageObj.delayMs || 3000;
                log.debug('Envoi de r√©ponse programm√©', { delay });
                
                setTimeout(async () => {
                  try {
                    // Utiliser la simulation de frappe pour les messages standards
                    await simulateTypingAndSend(chatId, content, {
                      typingSpeed: 90, // Vitesse normale pour les messages longs
                      minTypingTime: 2500, // Un peu plus long pour montrer qu'elle r√©fl√©chit
                      maxTypingTime: 9000 // Maximum 9 secondes pour les longs messages
                    });
                    
                    log.info('Message envoy√© avec simulation de frappe', {
                      chatId: chatId.split('@')[0],
                      messageLength: content.length,
                      step: session.currentStep
                    });
                  } catch (error) {
                    log.error('Erreur lors de l\'envoi du message', {
                      error: error.message,
                      chatId: chatId.split('@')[0]
                    });
                  }
                }, delay);
              }
            }
          }
          
        } catch (nlpError) {
          log.error('Erreur lors de l\'analyse NLP', { error: nlpError.message });
          
          // M√™me en cas d'erreur NLP, continuer la conversation
          const currentStep = stepProcessor.getStepById(session.currentStep);
          
          // Utiliser la m√™me logique que dans le cas normal
          let nextStep;
          let directResponse = null;
          
          // Gestion des transitions de type objet
          if (currentStep?.transitions?.onSuccess && typeof currentStep.transitions.onSuccess === 'object') {
            if (currentStep.transitions.onSuccess.type === 'intent_platform') {
              // En cas d'erreur NLP, on utilise directement le fallback comme r√©ponse directe
              directResponse = currentStep.transitions.onSuccess.fallback;
              // Rester √† l'√©tape actuelle
              nextStep = session.currentStep;
            } else if (currentStep.transitions.onSuccess.type === 'conditional') {
              // Pour les transitions conditionnelles, passer √† l'√©tape par d√©faut
              nextStep = currentStep.transitions.onSuccess.default || 'step_2_location';
            } else {
              // Pour les autres types, utiliser la valeur par d√©faut
              nextStep = currentStep.transitions.onSuccess.nextStep || 'step_2_location';
            }
          } else {
            // Transitions simples (cha√Æne de caract√®res)
            nextStep = currentStep?.transitions?.onSuccess || 
                      botConfig.scenario?.startStep || 
                      'step_2_location';
          }
          log.info('Fallback - Passage √† l\'√©tape suivante sans analyse NLP', {
            from: session.currentStep,
            to: nextStep
          });
          
          session.previousStep = session.currentStep;
          session.currentStep = nextStep;
          
          // Si nous avons une r√©ponse directe, l'envoyer imm√©diatement
          if (directResponse) {
            log.info('Envoi de r√©ponse directe (fallback)', { response: directResponse });
            
            // Ajouter des typos pour un effet naturel
            const content = addRandomTypos(directResponse);
            
            // Envoyer avec un l√©ger d√©lai
            setTimeout(() => {
              client.sendMessage(chatId, content).then(() => {
                log.info('Message direct de fallback envoy√©', {
                  chatId: chatId.split('@')[0],
                  messageLength: content.length
                });
              }).catch(error => {
                log.error('Erreur lors de l\'envoi du message direct', {
                  error: error.message,
                  chatId: chatId.split('@')[0]
                });
              });
            }, 2000);
          }
          // Sinon, envoyer le message correspondant √† la nouvelle √©tape
          else {
            const newStep = stepProcessor.getStepById(session.currentStep);
            if (newStep && newStep.messages && newStep.messages.length > 0) {
              setTimeout(() => {
                const content = newStep.messages[0].content;
                client.sendMessage(chatId, content).then(() => {
                  log.info('Message de fallback envoy√©', {
                    chatId: chatId.split('@')[0],
                    messageLength: content.length
                  });
                }).catch(error => {
                  log.error('Erreur lors de l\'envoi du message de fallback', {
                    error: error.message
                  });
                });
              }, 3000);
            }
          }
        }
        
      } catch (error) {
        log.error('Erreur lors du traitement du message', {
          error: error.message,
          stack: error.stack
        });
      }
    });
    
    /**
     * Simuler la frappe au clavier avant d'envoyer un message
     * @param {string} chatId - ID du chat
     * @param {string} message - Message √† envoyer
     * @param {number} typingDelay - Temps de frappe simul√© (proportionnel √† la longueur du message)
     * @returns {Promise<void>}
     */
    async function simulateTypingAndSend(chatId, message, options = {}) {
      try {
        // R√©cup√©rer le chat
        const chat = await client.getChatById(chatId);
        
        // Calculer un d√©lai proportionnel √† la longueur du message (plus r√©aliste)
        // Entre 1 et 5 secondes, selon la longueur (entre 100 et 500ms par caract√®re, ajust√© au besoin)
        const typingSpeed = options.typingSpeed || 80; // ms par caract√®re
        const minTypingTime = options.minTypingTime || 2000; // minimum 2 secondes
        const maxTypingTime = options.maxTypingTime || 8000; // maximum 8 secondes
        
        // Calculer le d√©lai en fonction de la longueur du message
        let typingTime = Math.min(Math.max(message.length * typingSpeed, minTypingTime), maxTypingTime);
        
        // Ajouter un peu d'al√©atoire (¬±15%)
        const randomFactor = 0.85 + (Math.random() * 0.3); // entre 0.85 et 1.15
        typingTime = Math.round(typingTime * randomFactor);
        
        log.debug('Simulation de frappe', { 
          chatId: chatId.split('@')[0], 
          messageLength: message.length, 
          typingTime 
        });
        
        // Indiquer que le bot est en train d'√©crire
        await chat.sendStateTyping();
        
        // Attendre le d√©lai calcul√© pour simuler la frappe
        await new Promise(resolve => setTimeout(resolve, typingTime));
        
        // Envoyer le message
        const sentMessage = await client.sendMessage(chatId, message, options.messageOptions || {});
        
        // Arr√™ter l'√©tat de frappe (pas toujours n√©cessaire car l'envoi du message le fait automatiquement)
        // await chat.clearState();
        
        log.info('Message envoy√© apr√®s simulation de frappe', {
          chatId: chatId.split('@')[0], 
          messageLength: message.length,
          typingTime
        });
        
        return sentMessage;
      } catch (error) {
        log.error('Erreur lors de la simulation de frappe', { 
          error: error.message,
          chatId: chatId.split('@')[0] 
        });
        
        // En cas d'erreur, envoyer le message directement sans simulation
        return await client.sendMessage(chatId, message, options.messageOptions || {});
      }
    }
    
    // Ajouter des typos al√©atoires pour un effet plus naturel
    function addRandomTypos(text) {
      if (!botConfig.behavior?.randomization?.typosEnabled) {
        return text;
      }
      
      const typoFrequency = botConfig.behavior?.randomization?.typosFrequency || 0.05;
      
      // Types de typos
      const typoTypes = [
        // Doublement de lettres
        (char) => char + char,
        // Inversion avec lettre suivante
        (char, i, text) => i < text.length - 1 ? text[i+1] + char : char,
        // Omission de lettre
        () => '',
        // Remplacement par une lettre proche sur clavier
        (char) => {
          const keyboardNeighbors = {
            'a': 'qzs', 'e': 'rzd', 'i': 'uo', 'o': 'iplk',
            't': 'ry', 's': 'dzaq', 'n': 'bhj'
          };
          const neighbors = keyboardNeighbors[char.toLowerCase()];
          if (!neighbors) return char;
          return neighbors.charAt(Math.floor(Math.random() * neighbors.length));
        }
      ];
      
      let result = '';
      let typoCount = 0;
      
      for (let i = 0; i < text.length; i++) {
        // Appliquer une typo avec la probabilit√© d√©finie
        if (Math.random() < typoFrequency) {
          const typoType = typoTypes[Math.floor(Math.random() * typoTypes.length)];
          result += typoType(text[i], i, text);
          typoCount++;
        } else {
          result += text[i];
        }
      }
      
      if (typoCount > 0) {
        log.debug('Typos ajout√©s au message', { count: typoCount });
      }
      
      return result;
    }
    
    // Nettoyage des sessions inactives
    const cleanupInterval = setInterval(() => {
      const now = Date.now();
      const inactiveTimeout = 30 * 60 * 1000; // 30 minutes
      let cleanedCount = 0;
      
      sessions.forEach((session, chatId) => {
        if (now - session.lastActivity > inactiveTimeout) {
          sessions.delete(chatId);
          cleanedCount++;
        }
      });
      
      if (cleanedCount > 0) {
        log.info('Sessions inactives nettoy√©es', { count: cleanedCount });
      }
    }, 15 * 60 * 1000); // V√©rifier toutes les 15 minutes
    
    // Initialiser WhatsApp
    log.info('Initialisation du client WhatsApp...');
    await client.initialize();
    
    return {
      client,
      sessions,
      cleanupInterval
    };
    
  } catch (error) {
    log.error('Erreur fatale lors de l\'initialisation du bot', {
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
}

// Fonction pour arr√™ter le bot proprement
async function stopBot() {
  const log = getLoggerInstance();
  
  if (!isRunning) {
    log.warn('Tentative d\'arr√™t du bot alors qu\'il n\'est pas en cours d\'ex√©cution');
    return;
  }

  log.info('D√©but de la proc√©dure d\'arr√™t du bot...');
  
  try {
    if (client) {
      await client.destroy();
      client = null;
      log.info('Client WhatsApp d√©truit avec succ√®s');
    }
    
    // Nettoyer les sessions
    const sessionCount = sessions.size;
    sessions.clear();
    log.info('Sessions nettoy√©es', { count: sessionCount });
    
    isRunning = false;
    log.info('Bot arr√™t√© avec succ√®s');
  } catch (error) {
    log.error('Erreur lors de l\'arr√™t du bot', {
      error: error.message,
      stack: error.stack
    });
    throw error;
  }
}

// Fonction pour obtenir le statut du bot
function getBotStatus() {
  const status = {
    isRunning,
    sessionsCount: sessions.size,
    clientState: client ? client.info : null
  };
  
  getLoggerInstance().debug('Statut du bot demand√©', status);
  
  return status;
}

// Si le script est ex√©cut√© directement (pas import√© comme module)
if (require.main === module) {
  const log = getLoggerInstance();
  
  // D√©marrer le bot
  initializeBot().catch(err => {
    log.error('Erreur lors de l\'initialisation du bot (main)', {
      error: err.message,
      stack: err.stack
    });
    process.exit(1);
  });

  // Gestion propre de l'arr√™t
  process.on('SIGINT', async () => {
    log.info('Signal SIGINT re√ßu');
    await stopBot();
    process.exit(0);
  });

  process.on('SIGTERM', async () => {
    log.info('Signal SIGTERM re√ßu');
    await stopBot();
    process.exit(0);
  });
}

// Exporter les fonctions pour un usage externe
module.exports = {
  initializeBot,
  stopBot,
  getBotStatus,
  setLogger,
  client,
  sessions
};
