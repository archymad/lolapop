#!/usr/bin/env node
require('dotenv').config();

/**
 * Orchestrateur principal pour g√©rer le d√©marrage des composants
 * G√®re le serveur NLP, l'interface admin et le bot WhatsApp
 */

const { spawn } = require('child_process');
const path = require('path');
const axios = require('axios');
const chalk = require('chalk');
const { getLogger } = require('./utils/logger');

class Orchestrator {
  constructor() {
    // Processus enfants
    this.processes = {
      nlp: null,
      admin: null,
      bot: null
    };

    // Configuration
    this.config = {
      // Ports et URLs
      nlpPort: process.env.FLASK_PORT || 5000,
      adminPort: process.env.ADMIN_PORT || 3000,
      nlpBaseUrl: process.env.NLP_SERVER_URL || `http://${process.env.FLASK_HOST || '127.0.0.1'}:${process.env.FLASK_PORT || 5000}`,
      ollamaBaseUrl: process.env.OLLAMA_HOST || 'http://127.0.0.1:11434',
      // Commande Python selon OS
      nlpCommand: process.platform === 'win32' ? 'python' : 'python3'
    };

    // Endpoints sant√©
    this.config.nlpHealthUrl = `${this.config.nlpBaseUrl}/api/health`;
    this.config.ollamaHealthUrl = `${this.config.ollamaBaseUrl}/api/tags`;

    // Logger
    this.logger = getLogger({
      logToFile: true,
      logDir: './logs'
    });

    this.botStatus = 'stopped';
  }

  /**
   * V√©rifie que Ollama est en cours d'ex√©cution
   */
  async checkOllama() {
    this.logger.info('üîç V√©rification du serveur Ollama...');
    try {
      await axios.get(this.config.ollamaHealthUrl, { timeout: 5000 });
      this.logger.info('‚úì Ollama est en cours d\'ex√©cution');
    } catch (err) {
      this.logger.error('‚úó Impossible de joindre Ollama', { message: err.message });
      throw new Error('Ollama n\'est pas d√©marr√© ou injoignable');
    }
  }

  /**
   * V√©rifie la sant√© du serveur NLP Flask (endpoint /api/health)
   */
  async checkNLPHealth() {
    this.logger.info('üîç V√©rification du serveur NLP...');
    const maxAttempts = 10;
    for (let i = 1; i <= maxAttempts; i++) {
      try {
        const { data } = await axios.get(this.config.nlpHealthUrl, { timeout: 5000 });
        if (data.status === 'ok') {
          this.logger.info('‚úì NLP server is healthy');
          return;
        } else {
          this.logger.warn(`Health check responded with error: ${JSON.stringify(data)}`);
        }
      } catch (err) {
        this.logger.debug(`Tentative ${i}/${maxAttempts} √©chou√©e: ${err.message}`);
      }
      await new Promise(res => setTimeout(res, 1000));
    }
    throw new Error('Le serveur NLP n\'est pas disponible apr√®s plusieurs tentatives');
  }

  /**
   * D√©marre le serveur NLP (Flask)
   */
  async startNLPServer() {
    this.logger.info('üöÄ D√©marrage du serveur NLP...');
    const script = path.join(__dirname, 'ai', 'model_server.py');
    const env = { ...process.env, FLASK_PORT: this.config.nlpPort };

    const nlpProcess = spawn(this.config.nlpCommand, [script], {
      stdio: ['ignore', 'pipe', 'pipe'],
      env
    });
    this.processes.nlp = nlpProcess;

    // Logger des sorties
    nlpProcess.stdout.on('data', data => {
      this.logger.debug('[NLP Output]', { message: data.toString().trim() });
    });
    nlpProcess.stderr.on('data', data => {
      this.logger.error('[NLP Error]', { message: data.toString().trim() });
    });
    nlpProcess.on('exit', (code, signal) => {
      if (code !== 0) {
        this.logger.error('Le serveur NLP s\'est arr√™t√© de mani√®re inattendue', { code, signal });
      }
    });

    // V√©rifier la sant√© apr√®s d√©marrage
    await this.checkNLPHealth();
  }

  /**
   * D√©marre l'interface d'administration (Express)
   */
  async startAdminServer() {
    this.logger.info('üöÄ D√©marrage de l\'interface d\'administration...');
    return new Promise((resolve, reject) => {
      const adminProcess = spawn('node', ['admin.js'], {
        stdio: ['ignore', 'pipe', 'pipe'],
        env: { ...process.env, PORT: this.config.adminPort }
      });
      this.processes.admin = adminProcess;

      adminProcess.stdout.on('data', data => {
        const msg = data.toString().trim();
        this.logger.debug('[Admin Output]', { message: msg });
        if (msg.includes('Interface d\'administration d√©marr√©e')) {
          this.logger.info('‚úì Interface d\'administration d√©marr√©e', {
            url: `http://localhost:${this.config.adminPort}`
          });
          resolve();
        }
      });
      adminProcess.stderr.on('data', data => {
        this.logger.error('[Admin Error]', { message: data.toString().trim() });
      });
      adminProcess.on('error', err => {
        this.logger.error('Erreur d√©marrage interface admin', { message: err.message });
        reject(err);
      });
      adminProcess.on('exit', (code, signal) => {
        if (code !== 0) {
          this.logger.error('Interface admin arr√™t√©e de mani√®re inattendue', { code, signal });
        }
      });
    });
  }

  /**
   * Ouvre le navigateur vers l'interface admin
   */
  async openBrowser() {
    const url = `http://localhost:${this.config.adminPort}`;
    this.logger.info('üåê Ouverture du navigateur', { url });
    const opener = process.platform === 'darwin' ? 'open'
                  : process.platform === 'win32' ? 'start'
                  : 'xdg-open';
    require('child_process').exec(`${opener} ${url}`, err => {
      if (err) this.logger.error('Erreur ouverture navigateur', { message: err.message });
      else    this.logger.info('Navigateur ouvert avec succ√®s');
    });
  }

  /**
   * D√©marre tous les services (Ollama, NLP, Admin)
   */
  async startServices() {
    try {
      this.logger.info('üöÄ D√©marrage des services...');
      await this.checkOllama();
      await this.startNLPServer();
      await this.startAdminServer();
      // Pause pour stabilit√©
      await new Promise(res => setTimeout(res, 2000));
      await this.openBrowser();
      this.logger.info('‚ú® Services d√©marr√©s avec succ√®s!', {
        nlp: this.config.nlpBaseUrl,
        admin: `http://localhost:${this.config.adminPort}`
      });
    } catch (err) {
      this.logger.error('Erreur d√©marrage services', { message: err.message });
      this.cleanup();
      process.exit(1);
    }
  }

  /**
   * D√©marre le bot WhatsApp
   */
  async startBot() {
    this.logger.info('ü§ñ D√©marrage du bot WhatsApp...');
    return new Promise((resolve, reject) => {
      const botProcess = spawn('node', ['bot/index.js'], { stdio: ['ignore', 'pipe', 'pipe'], env: process.env });
      this.processes.bot = botProcess;
      botProcess.stdout.on('data', data => {
        const msg = data.toString().trim();
        this.logger.debug('[Bot Output]', { message: msg });
        if (msg.includes('Client WhatsApp pr√™t')) {
          this.logger.info('‚úì Bot WhatsApp d√©marr√©');
          resolve();
        } else if (msg.includes('QR Code')) {
          this.logger.info('QR Code g√©n√©r√© - scannez');
        }
      });
      botProcess.stderr.on('data', data => this.logger.error('[Bot Error]', { message: data.toString().trim() }));
      botProcess.on('error', err => {
        this.logger.error('Erreur d√©marrage bot', { message: err.message });
        reject(err);
      });
      botProcess.on('exit', (code, signal) => {
        this.botStatus = 'stopped';
        if (code !== 0) {
          this.logger.error('Bot arr√™t√© de fa√ßon inattendue', { code, signal });
        } else {
          this.logger.info('Bot arr√™t√© normalement');
        }
      });
    });
  }

  /**
   * Stoppe tous les processus enfants
   */
  cleanup() {
    this.logger.info('üßπ Nettoyage des processus...');
    Object.entries(this.processes).forEach(([name, proc]) => {
      if (proc) {
        this.logger.info(`Arr√™t de ${name}...`);
        try { proc.kill('SIGINT'); }
        catch (err) { this.logger.error(`Erreur arr√™t ${name}`, { message: err.message }); }
      }
    });
  }

  /**
   * Configure la gestion des signaux externes
   */
  setupSignalHandlers() {
    ['SIGINT','SIGTERM'].forEach(sig => {
      process.on(sig, () => {
        this.logger.info(`‚úã ${sig} re√ßu - arr√™t`);
        this.cleanup();
        process.exit(0);
      });
    });
    process.on('uncaughtException', err => {
      this.logger.error('Exception non g√©r√©e', { message: err.message, stack: err.stack });
      this.cleanup();
      process.exit(1);
    });
    process.on('unhandledRejection', (reason) => {
      this.logger.error('Promesse rejet√©e non g√©r√©e', { reason });
    });
  }

  /**
   * Renvoie les statistiques du syst√®me et des processus
   */
  getSystemStats() {
    const stats = { uptime: process.uptime(), memory: process.memoryUsage(), processes: {} };
    Object.entries(this.processes).forEach(([name, proc]) => {
      stats.processes[name] = { running: !!proc, pid: proc ? proc.pid : null };
    });
    return stats;
  }
}

// Fonction principale
async function main() {
  console.log(chalk.cyan('‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó'));
  console.log(chalk.cyan('‚ïë        Bot Conversationnel - Lola      ‚ïë'));
  console.log(chalk.cyan('‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù'));
  console.log();

  const orchestrator = new Orchestrator();
  orchestrator.setupSignalHandlers();
  orchestrator.logger.info('D√©marrage du syst√®me de bot conversationnel', {
    platform: process.platform,
    nodeVersion: process.version,
    environment: process.env.NODE_ENV || 'development'
  });

  // D√©marrer les services puis le bot
  await orchestrator.startServices();
  await orchestrator.startBot();

  // Statistiques p√©riodiques
  setInterval(() => {
    orchestrator.logger.debug('Statistiques syst√®me', orchestrator.getSystemStats());
  }, 60000);
}

if (require.main === module) {
  main().catch(err => {
    console.error(chalk.red('Erreur fatale:'), err);
    process.exit(1);
  });
}

module.exports = Orchestrator;
